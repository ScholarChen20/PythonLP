7.4（字符串）
字符串内容对齐：
1）居中    center(30,'-')
2）左对齐   ljust(20,'*')    
3）右对齐   rjust(20,'*')    
4) 右对齐，若不全0补足  zfill(30)
判断字符串：
1）isdecimal()  是否全部由十进制数字组成
2)  isnumberic()   是否全部由数字组成
3)  isalnum()    是否由字母和数字组成
4）isidentifier()  是否为合法的标识符
5)  isspace()  是否由空白字符（回车、换行，水平制表）组成
6)  isalpha() 是否全部由字母组成
字符串劈分：
1)字符串变量.spilt（sep='|',maxsplit=1）从左侧开始劈分
2)字符串变量.rsplit.(sep='|',maxsplit=1) 从右侧开始劈分
3）sep指劈分符，maxsplit指最大劈分次数。默认的劈分字符是空格字符，返回的值是一个列表。
字符串替换：repalce（被替换的字符串，字替换符串，被替换的字符串的位置）
字符串合并：合并内容.join(变量名)
字符串驻留机制：先定义 import sys  后调用   sys.intern(变量)
字符串切片：变量名[开始位置：结束位置：切片个数]
查询：1）从左往右 index，find     2）从右往左 rindex，rfind
字符串转换：
upper 所有字符转大写
lower 所有字符转小写
swapcase 大写转小写，小写转大写
capitalize 第一个字符大写，其余转小写
title 每个单词首字符转大写，其余部分小写


7.5
递归函数：使用递归来计算阶乘
bug类型：
1）漏了末尾的冒号（循环语句，if语句，else语句）
2）缩进错误
3）把英文符号写成中文符号（引号、冒号、括号）
4）字符串拼接的时候，把字符串和数字拼在一起
5）没有定义变量（while的循环条件的变量）
6）“==”比较运算符和“=”的赋值运算符的混用


7.6
try {}  except 结构
try{}   except .....else结构
如果try块中没有抛出异常，则执行else块，如果try中抛出异常，则执行except块
try{}   except ...else...finally结构
finally块不论是否发生异常都会被执行，能常用来释放try块中的申请的资源
常见异常类型：
1）ZeroDivisionError  除（或去模）零（所有数据类型）
2）IndexError   序列中没有此索引
3）KeyError     映射中没有这个键
4）NameError   未申明/初始化对象（没有属性）
5）SyntaxError   Python语法错误
6）ValueError   传入无效的参数

7.14
断点：程序运行到此处，暂时挂起，停止执行。
调试视图：右键单机编辑区，点击‘debug’模板名（ shift+f9）

7.15
面向过程：事物简单，可以用线性的思维去解决
面向对象：事务比较复杂，使用简单的线性思维无法解决

7.24
在类之外定义的称为函数，在类之内定义的称为方法
class 类名
    pass


7.26
类属性：类中方法的变量称为类属性，被该类的所有对象所共享
类方法：使用classmethod修饰的方法，使用类名直接访问的方法
静态方法：使用static method修饰的方法，使用类名直接访问的方法
方法调用
stu=Student()
stu.eat()=Student.eat(stu)   用法一样


7.28
封装：提高程序的安全性
（在Python中没有专门的修饰符用于属性的私有，如果该属性不希望在类对外部被访问，前面使用两个_ _)
继承：提高代码的复用性
多态：提高程序的可拓展性和可维护性


7.29
object类是所有类中的父类，因此所有类都有object类的属性和方法
内置函数dir()可以查看指定对象所有属性
__str___()经常用于print()方法，帮助我们查看对象的信息

7.30
多态：就是具有多种形态，即使不知道一个变量所引用的对象到底是什么类型，仍然可以
通过这个变量调用方法，在运行过程中根据变量所引用的对象的类型，动态决定调用那个对象中的方法

静态方法实现多态的三个条件
1）继承   2）方法重写   3）父类引用指向子类对象

特殊属性：__dict__  输出实例对象的所有属性    
特殊方法：__len__() 取字符串的长度    __add__() 相加    __new__()     __init__()

8.2
变量的复制操作：
只是形成两个变量，实际上还是指向同一个对象。
浅拷贝：源对象和拷贝对象会引用同一个对象。
深拷贝：copy和deepcopy函数，递归拷贝对象中饱含的子对象，源对象
和拷贝对象所有的子对象也不相同。


8.4
模块（文件中以.py结尾的python文件）
包含函数、类、基本语句

8.5
创建模板
（新建一个.py文件，名称尽量不要与Python自带的标准模板名称相同））
导入模板
import   模板名称
from 模板名称 import 函数/变量/类

8.6
if __name__='_main_';
 pass
Python中的包（是一个分层次的目录结构）
作用：代码规范，避免模板名称冲突
import 包名：模板名

8.10
sys         与Python解释器及其环境相关的标准库
time       时间相关的各种函数标准库
os            访问操作系统服务功能
urlib        读取网上服务器的数据
json     使用JSON序列化和反序列化对象
re              在字符串中执行正则表达式匹配和替换
math          提供标准算数运算函数
decimal     进行精确控制运算精度、有效数位和四舍五入操作的十进制运算
logging      提供灵活的记录事件、错误、警告和调试信等日志信息的功能


pip install 模板名
import 模板名

8.8
编码格式
python的解释器使用的是Unicode(内存)
.py文件在磁盘上-------UTF-8存储（外村）

8.11
文件的读写原理
内置函数open创建文件对象
file=open（filename[，model，encoding]）

8.12
文件打开方式
r,w,a,wb,rb,+

read([size])   读取size个字节或字符的内容返回
readline    从文本中读取一行内容
readlines   把文本文件每一行作为独立的字符串对象，并放入列表返回
write(str)   讲字符串内容写进文件
writelines(s_lst)  将字符串s_lst写入文本文件，不添加换行符
seek(offset[,whence])      将文件指针移动到新的位置（0：文件头开始计算 1：当前位置计算 2：文件尾开始计算）
tell        文件指针的当前位置
flush         缓冲区文件写入文件，不关闭文件
close       缓冲区内容写入文件，关闭文件，释放文件对象相关资源

8.13
os模块
getcwd（）  返回当前工作目录
listdir(path)   返回指定路径下的文件和目录信息
mkdir（） 创建目录
makedirs（path/path2.......[，mode])   创建多级目录
rmidr（path）    删除目录
removedirs（path1/path2....）  删除多级目录
chdir(path)       将path设置为当前工作目录

8.14
os模板
abspath（）获取文件或目录的绝对路径
exists（）   判断文件或目录是否存在，存在返回true，否则false
join（path，name）  拼接
sqlitext（）     分离文件名和扩展名
basename（）目录中提取文件名
dirname()      路径中提取文件路径
isdir()           判断是否为路径


8.15
学生成绩管理系统
1  insert  录入信息
2  search  查询信息
3  delete   删除信息
4  modify  修改信息
5  sort   成绩排序
6  total 统计学生总人数
7 show   显示所有学生信息

8.21
sort() 应用在list上，reverse=False 升序；reverse=True为降序
sorted() 对所有对象进行排序操作